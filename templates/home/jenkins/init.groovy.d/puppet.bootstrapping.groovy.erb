#!groovy
/*

  !! Managed by Puppet !!
  Setup initial bootstrapping user for puppet

*/

import jenkins.model.*
import hudson.security.*
import com.cloudbees.plugins.credentials.*
import hudson.plugins.active_directory.*
import hudson.security.HudsonPrivateSecurityRealm.Details

// Code
def instance = Jenkins.getInstance()
def originalRealm = instance.getSecurityRealm()
def originalRealmName = originalRealm.getClass().getName()
def restoreRealm = false

// bootstrap users
def bootstrapUsers = [
<% @_bootstrap_users.each do |username,userconfig| -%>
  [
    username : '<%= username %>',
    password : '<%= userconfig['password'] %>',
    email : '<%= userconfig['email'] %>',
    full_name : '<%= userconfig['full_name'] %>',
<% if userconfig['public_key_file'] -%>
    ssh_key_file: '<%= userconfig['public_key_file'] %>',
<% else -%>
    ssh_key : '<%= userconfig['public_key'] %>',
<% end -%>
  ],
<% end -%>
]

def currentRealmName = null

bootstrapUsers.each { user ->

  // User config
  def username = user['username']
  def password = user['password']
  def email = user['email']
  def full_name = user['full_name']
  def ssh_key = null
  if (user.containsKey('ssh_key_file')) {
    ssh_key = new File(user['ssh_key_file']).getText('UTF-8')
  }
  else {
    ssh_key = user['ssh_key']
  }

  println "--> Configuring Jenkins Automation User (${username} with ssh_key ${ssh_key})"


  // Get user and create if not exists
  def userObject = hudson.model.User.get(username,false)
  if (userObject == null) {
    println "--> creating new user '${username}'"

    currentRealmName = instance.getSecurityRealm().getClass().getName()
    if (currentRealmName == 'hudson.security.HudsonPrivateSecurityRealm') {
      println "--> Jenkins Security Realm already configured (${currentRealmName})"
    } else {
      println "--> Configuring Jenkins Local Security Realm (HudsonPrivateSecurityRealm) to bootstrap security realm"
      def hudsonRealm = new HudsonPrivateSecurityRealm(false)
      instance.setSecurityRealm(hudsonRealm)
      restoreRealm = true
      println "--> Done configuring Jenkins Local Security Realm"
    }

    userObject = instance.getSecurityRealm().createAccount(username,password)
  } else {
    println "--> using existing user '${username}'"
  }


  // set full name
  userObject.setFullName(full_name)


  // password
  userObject.addProperty(Details.fromPlainPassword(password))

  // set email
  def email_param = this.class.classLoader.loadClass('hudson.tasks.Mailer$UserProperty').newInstance(email)
  userObject.addProperty(email_param)


  // set ssh_key
  if ( ssh_key != '' ) {
    def keys_param = new org.jenkinsci.main.modules.cli.auth.ssh.UserPropertyImpl(ssh_key)
    userObject.addProperty(keys_param)
  }

  // save the user
  userObject.save()


}



println "--> Saving Config"
instance.save()
println "--> Done Saving Config"

if (restoreRealm) {
  println "--> Restoring Security Realm (${originalRealmName})"
  instance.setSecurityRealm(originalRealm)
  println "--> Saving Config"
  instance.save()
  println "--> Done Saving Config"
}
